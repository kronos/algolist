//
// Created by Ivan Samsonov on 2019-06-08.
//

#include <gtest/gtest.h>
#include "math/long.hpp"

class LongTest : public ::testing::Test, public Long {
protected:
};

template <typename T>
Long L(const T& s) {
    return Long(s);
}

//
//TEST_F(LongTest, ToStringWorks) {
//    EXPECT_EQ(big_positive_str, big_positive->to_string());
//    EXPECT_EQ(big_negative_str, big_negative->to_string());
//    EXPECT_EQ(small_negative_str, small_negative->to_string());
//    EXPECT_EQ(small_positive_str, small_positive->to_string());
//}
//


TEST(Long, Constructors) {
    // empty constructor
    EXPECT_EQ("0", Long().to_string());
    // int constructor
    EXPECT_EQ("123", L(123).to_string());
    // long long constructor
    EXPECT_EQ("-1152921504606846976", L(-1152921504606846976LL).to_string());
    // string constructor
    EXPECT_EQ("0", L("-0").to_string());
    EXPECT_EQ("0", L("+0").to_string());
    EXPECT_EQ("123", L("+123").to_string());
    EXPECT_EQ("0", L("000000000000000000000000000").to_string());
    EXPECT_EQ("100", L("0000000000000000000000000100").to_string());
    EXPECT_EQ("1000000000000000000000000000", L("1000000000000000000000000000").to_string());
    // Long constructor
    EXPECT_EQ("-421", L(L(-421)).to_string());
}

TEST(Long, ToString) {
    EXPECT_EQ("123", L("123").to_string());
    EXPECT_EQ("-1", L("-1").to_string());
    EXPECT_EQ("1", L("+1").to_string());
    EXPECT_EQ("3333333337407407400370370370123", L("3333333337407407400370370370123").to_string());
}

TEST(Long, IsZero) {
    EXPECT_TRUE(L(0).is_zero());
    EXPECT_TRUE(Long().is_zero());
    EXPECT_TRUE(L("-0").is_zero());
    EXPECT_TRUE(L("000000").is_zero());
    EXPECT_TRUE(L("+000000").is_zero());
    EXPECT_FALSE(L("-1").is_zero());
    EXPECT_FALSE(L("+1").is_zero());
    EXPECT_FALSE(L("3333333337407407400370370370123").is_zero());
}

TEST(Long, UnariMinus) {
    EXPECT_EQ("-123456", (-L("123456")).to_string());
    EXPECT_EQ("123456", (-L("-123456")).to_string());
    EXPECT_EQ("0", (-L("0")).to_string());
}

TEST(Long, Minus) {
    // two positive numbers
    EXPECT_EQ("-99999999999999999999999999", (L("1") - L("100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999", (L("100000000000000000000000000") - L("1")).to_string());
    EXPECT_EQ("1", (L("100000000000000000000000000") - L("99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("99999999999999999999999999") - L("100000000000000000000000000")).to_string());

    // two negative numbers
    EXPECT_EQ("99999999999999999999999999", (L("-1") - L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-99999999999999999999999999", (L("-100000000000000000000000000") - L("-1")).to_string());
    EXPECT_EQ("-1", (Long("-100000000000000000000000000") - L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("1", (Long("-99999999999999999999999999") - L("-100000000000000000000000000")).to_string());

    // two mixed numbers
    EXPECT_EQ("-1999999998", (L("-999999999") - L("999999999")).to_string());
    EXPECT_EQ("100000000000000000000000001",  (L("1")  - L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-1") - L("100000000000000000000000000")).to_string());
    EXPECT_EQ("100000000000000000000000001",  (L("100000000000000000000000000")  - L("-1")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-100000000000000000000000000") - L("1")).to_string());
    EXPECT_EQ("199999999999999999999999999",  (L("100000000000000000000000000")  - L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-100000000000000000000000000") - L("99999999999999999999999999")).to_string());
    EXPECT_EQ("199999999999999999999999999",  (L("99999999999999999999999999")   - L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-99999999999999999999999999")  - L("100000000000000000000000000")).to_string());
}

TEST(Long, Plus) {
    // two positive numbers
    EXPECT_EQ("100000000000000000000000001", (L("1") + L("100000000000000000000000000")).to_string());
    EXPECT_EQ("100000000000000000000000001", (L("100000000000000000000000000") + L("1")).to_string());
    EXPECT_EQ("199999999999999999999999999", (L("100000000000000000000000000") + L("99999999999999999999999999")).to_string());
    EXPECT_EQ("199999999999999999999999999", (L("99999999999999999999999999") + L("100000000000000000000000000")).to_string());

    // two negative numbers
    EXPECT_EQ("-1999999998", (L("-999999999") + L("-999999999")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-1") + L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-100000000000000000000000000") + L("-1")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (Long("-100000000000000000000000000") + L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (Long("-99999999999999999999999999") + L("-100000000000000000000000000")).to_string());

    // two mixed numbers
    EXPECT_EQ("-99999999999999999999999999", (L("1")  + L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999",  (L("-1") + L("100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999",  (L("100000000000000000000000000")  + L("-1")).to_string());
    EXPECT_EQ("-99999999999999999999999999", (L("-100000000000000000000000000") + L("1")).to_string());
    EXPECT_EQ("1",  (L("100000000000000000000000000")  + L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("-100000000000000000000000000") + L("99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("99999999999999999999999999")   + L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("1",  (L("-99999999999999999999999999")  + L("100000000000000000000000000")).to_string());
}

TEST(Long, Multiply) {
    // ones
    EXPECT_EQ("1", (L("1") * L("1")).to_string());
    EXPECT_EQ("-1", (L("-1") * L("1")).to_string());
    EXPECT_EQ("-1", (L("1") * L("-1")).to_string());
    EXPECT_EQ("1", (L("-1") * L("-1")).to_string());
    // zeroes
    EXPECT_EQ("0", (L("0") * L("0")).to_string());
    EXPECT_EQ("0", (L("0") * L("99999999999999999999999999")).to_string());
    EXPECT_EQ("0", (L("-100000000000000000000000000") * L("0")).to_string());
    EXPECT_EQ("999999999999999999999999998000000000000000000000000001", (L("999999999999999999999999999") * L("999999999999999999999999999")).to_string());
    EXPECT_EQ("333333333740740740037037037012345678432098765444444445", (L("999999999222222222999999999") * L("333333333999999999555555555")).to_string());
}

TEST(Long, Less) {
    EXPECT_TRUE(L("0") < L("1"));
    EXPECT_TRUE(L("-2") < L("1"));
    EXPECT_TRUE(L("100000000000000000000000000") < L("100000000000000000000000001"));
    EXPECT_TRUE(L("999999999999999999999999989") < L("999999999999999999999999999"));
    EXPECT_TRUE(L("989999999999999999999999989") < L("999999999999999999999999989"));
    EXPECT_FALSE(L("-99999999999999999999999999") < L("-99999999999999999999999999"));
    EXPECT_FALSE(L("99999999999999999999999999")  < L("99999999999999999999999999"));
    EXPECT_FALSE(L("-99999999999999999999999999") < L("-100000000000000000000000000"));
}

TEST(Long, Greater) {
    EXPECT_TRUE(L("1") > L("0"));
    EXPECT_TRUE(L("1") > L("-2"));
    EXPECT_TRUE(L("100000000000000000000000001") > L("100000000000000000000000000"));
    EXPECT_TRUE(L("999999999999999999999999999") > L("999999999999999999999999989"));
    EXPECT_TRUE(L("999999999999999999999999989") > L("989999999999999999999999989"));
    EXPECT_FALSE(L("-99999999999999999999999999") > L("-99999999999999999999999999"));
    EXPECT_FALSE(L("99999999999999999999999999")  > L("99999999999999999999999999"));
    EXPECT_FALSE(L("-100000000000000000000000000") > L("-99999999999999999999999999"));
}

TEST(Long, LessOrEqual) {
    EXPECT_TRUE(L("0") <= L("1"));
    EXPECT_TRUE(L("-2") <= L("1"));
    EXPECT_TRUE(L("100000000000000000000000000") <= L("100000000000000000000000001"));
    EXPECT_TRUE(L("999999999999999999999999989") <= L("999999999999999999999999999"));
    EXPECT_TRUE(L("989999999999999999999999989") <= L("999999999999999999999999989"));
    EXPECT_TRUE(L("-99999999999999999999999999") <= L("-99999999999999999999999999"));
    EXPECT_TRUE(L("99999999999999999999999999")  <= L("99999999999999999999999999"));
    EXPECT_FALSE(L("-99999999999999999999999999") <= L("-100000000000000000000000000"));
}

TEST(Long, Equal) {
    EXPECT_TRUE(L("+0") == L("-0"));
    EXPECT_TRUE(L("100000000000000000000000000") == L("100000000000000000000000000"));
    EXPECT_FALSE(L("-1") == L("1"));
    EXPECT_FALSE(L("1") == L("-1"));
    EXPECT_FALSE(L("2") == L("3"));
    EXPECT_FALSE(L("-99999999999999999999999999") == L("-100000000000000000000000000"));
}

TEST(Long, NotEqual) {
    EXPECT_FALSE(L("+0") != L("-0"));
    EXPECT_FALSE(L("100000000000000000000000000") != L("100000000000000000000000000"));
    EXPECT_TRUE(L("-1") != L("1"));
    EXPECT_TRUE(L("1") != L("-1"));
    EXPECT_TRUE(L("2") != L("3"));
    EXPECT_TRUE(L("-99999999999999999999999999") != L("-100000000000000000000000000"));
}

TEST(Long, GreaterOrEqual) {
    EXPECT_TRUE(L("1") > L("0"));
    EXPECT_TRUE(L("1") > L("-2"));
    EXPECT_TRUE(L("100000000000000000000000001") >= L("100000000000000000000000000"));
    EXPECT_TRUE(L("999999999999999999999999999") >= L("999999999999999999999999989"));
    EXPECT_TRUE(L("999999999999999999999999989") >= L("989999999999999999999999989"));
    EXPECT_TRUE(L("-99999999999999999999999999") >= L("-99999999999999999999999999"));
    EXPECT_TRUE(L("99999999999999999999999999")  >= L("99999999999999999999999999"));
    EXPECT_FALSE(L("-100000000000000000000000000") >= L("-99999999999999999999999999"));
}

TEST(Long, PlusEqual) {
    // two positive numbers
    EXPECT_EQ("100000000000000000000000001", (L("1") += L("100000000000000000000000000")).to_string());
    EXPECT_EQ("100000000000000000000000001", (L("100000000000000000000000000") += L("1")).to_string());
    EXPECT_EQ("199999999999999999999999999", (L("100000000000000000000000000") += L("99999999999999999999999999")).to_string());
    EXPECT_EQ("199999999999999999999999999", (L("99999999999999999999999999") += L("100000000000000000000000000")).to_string());

    // two negative numbers
    EXPECT_EQ("-100000000000000000000000001", (L("-1") += L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-100000000000000000000000000") += L("-1")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-100000000000000000000000000") += L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-99999999999999999999999999") += L("-100000000000000000000000000")).to_string());

    // two mixed numbers
    EXPECT_EQ("-99999999999999999999999999", (L("1")  += L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999",  (L("-1") += L("100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999",  (L("100000000000000000000000000")  += L("-1")).to_string());
    EXPECT_EQ("-99999999999999999999999999", (L("-100000000000000000000000000") += L("1")).to_string());
    EXPECT_EQ("1",  (L("100000000000000000000000000")  += L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("-100000000000000000000000000") += L("99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("99999999999999999999999999")   += L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("1",  (L("-99999999999999999999999999")  += L("100000000000000000000000000")).to_string());
}

TEST(Long, MinusEqual) {
    // two positive numbers
    EXPECT_EQ("-99999999999999999999999999", (L("1") -= L("100000000000000000000000000")).to_string());
    EXPECT_EQ("99999999999999999999999999", (L("100000000000000000000000000") -= L("1")).to_string());
    EXPECT_EQ("1", (L("100000000000000000000000000") -= L("99999999999999999999999999")).to_string());
    EXPECT_EQ("-1", (L("99999999999999999999999999") -= L("100000000000000000000000000")).to_string());

    // two negative numbers
    EXPECT_EQ("99999999999999999999999999", (L("-1") -= L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-99999999999999999999999999", (L("-100000000000000000000000000") -= L("-1")).to_string());
    EXPECT_EQ("-1", (L("-100000000000000000000000000") -= L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("1", (L("-99999999999999999999999999") -= L("-100000000000000000000000000")).to_string());

    // two mixed numbers
    EXPECT_EQ("-1999999998", (L("-999999999") -= L("999999999")).to_string());
    EXPECT_EQ("100000000000000000000000001",  (L("1")  -= L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-1") -= L("100000000000000000000000000")).to_string());
    EXPECT_EQ("100000000000000000000000001",  (L("100000000000000000000000000")  -= L("-1")).to_string());
    EXPECT_EQ("-100000000000000000000000001", (L("-100000000000000000000000000") -= L("1")).to_string());
    EXPECT_EQ("199999999999999999999999999",  (L("100000000000000000000000000")  -= L("-99999999999999999999999999")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-100000000000000000000000000") -= L("99999999999999999999999999")).to_string());
    EXPECT_EQ("199999999999999999999999999",  (L("99999999999999999999999999")   -= L("-100000000000000000000000000")).to_string());
    EXPECT_EQ("-199999999999999999999999999", (L("-99999999999999999999999999")  -= L("100000000000000000000000000")).to_string());
}

TEST(Long, MultiplyEqual) {
    // ones
    EXPECT_EQ("1", (L("1") *= L("1")).to_string());
    EXPECT_EQ("-1", (L("-1") *= L("1")).to_string());
    EXPECT_EQ("-1", (L("1") *= L("-1")).to_string());
    EXPECT_EQ("1", (L("-1") *= L("-1")).to_string());
    // zeroes
    EXPECT_EQ("0", (L("0") *= L("0")).to_string());
    EXPECT_EQ("0", (L("0") *= L("99999999999999999999999999")).to_string());
    EXPECT_EQ("0", (L("-100000000000000000000000000") *= L("0")).to_string());
    EXPECT_EQ("999999999999999999999999998000000000000000000000000001", (L("999999999999999999999999999") *= L("999999999999999999999999999")).to_string());
    EXPECT_EQ("333333333740740740037037037012345678432098765444444445", (L("999999999222222222999999999") *= L("333333333999999999555555555")).to_string());
}

TEST(Long, PreIncrement) {
    EXPECT_EQ("0", (++L("-1")).to_string());
    EXPECT_EQ("1", (++L("0")).to_string());
    EXPECT_EQ("1000000000", (++L("999999999")).to_string());
}

TEST(Long, PostIncrement) {
    Long t(-1);
    EXPECT_EQ("-1", (t++).to_string());
    EXPECT_EQ("0", t.to_string());

    t = L("999999999");
    EXPECT_EQ("999999999", (t++).to_string());
    EXPECT_EQ("1000000000", t.to_string());
}

TEST(Long, PreDecrement) {
    EXPECT_EQ("-1", (--L("0")).to_string());
    EXPECT_EQ("0", (--L("1")).to_string());
    EXPECT_EQ("999999999", (--L("1000000000")).to_string());
}

TEST(Long, PostDecrement) {
    Long t(1);
    EXPECT_EQ("1", (t--).to_string());
    EXPECT_EQ("0", t.to_string());

    t = L("1000000000");
    EXPECT_EQ("1000000000", (t--).to_string());
    EXPECT_EQ("999999999", t.to_string());
}

TEST(Long, Output) {
    std::stringstream ss;
    Long t("-100000000000000000000000000");
    ss << t;
    EXPECT_EQ("-100000000000000000000000000", ss.str());
}

TEST(Long, Input) {
    std::stringstream ss;
    Long t;
    ss << "-100000000000000000000000000";
    ss >> t;
    EXPECT_EQ(L("-100000000000000000000000000"), t);
}